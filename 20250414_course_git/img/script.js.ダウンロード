!
/**
 * Viewport切り替え
 * 360px以下の場合は360px幅で表示
 */
(function () {
  const viewport = document.querySelector('meta[name="viewport"]');

  const switchViewport = debounce(() => {
    const value = window.outerWidth > 360
      ? 'width=device-width, initial-scale=1'
      : 'width=360';

    if (viewport.getAttribute('content') !== value) {
      viewport.setAttribute('content', value);
    }
  }, 300);

  addEventListener('resize', switchViewport, false);
  switchViewport();
})();

window.addEventListener('DOMContentLoaded', () => {
  const tabs = document.querySelectorAll('[role="tab"]');
  const tabList = document.querySelector('[role="tablist"]');

  tabs.forEach((tab) => {
    tab.addEventListener('click', changeTabs);
  })

  //const menuButton = document.querySelector('#drawerMenu_button');
  //menuButton.addEventListener('click', openDrawerMenu);
});

/**
 * 高頻度発火イベントの抑制
 * @param {*} func
 * @param {*} wait
 * @returns
 */
function debounce(func, wait) {
  let timeout;
  return function (...args) {
    const context = this;
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      func.apply(context, args);
    }, wait);
  };
}

/**
 * タブ切り替え
 * @param {*} event
 */
function changeTabs(event) {
  const target = event.target;
  const parent = target.parentNode;
  const grandparent = parent.parentNode;

  parent
    .querySelectorAll('[aria-selected="true"]')
    .forEach(tab => tab.setAttribute('aria-selected', false));

  target.setAttribute('aria-selected', true);

  grandparent
    .querySelectorAll('[role="tabpanel"]')
    .forEach(panel => {
      panel.setAttribute('aria-hidden', true);
    });

  grandparent.parentNode
    .querySelector(`#${target.getAttribute('aria-controls')}`)
    .setAttribute('aria-hidden', false);
}



/**
 * メニューを開く
 */
function openDrawerMenu() {
  const menuButton = document.querySelector('#drawerMenu_button');
  const menu = document.querySelector('#drawerMenu');

  const isExpanded = menuButton.getAttribute('aria-expanded');
  console.log(isExpanded);

  if (isExpanded === 'true') {
    // メニューを閉じる
    console.log('close');
    menuButton.setAttribute('aria-expanded', false);
    menu.setAttribute('inert', true);
    menu.setAttribute('aria-hidden', true);
  } else {
    // メニューを開く
    console.log('open');
    menuButton.setAttribute('aria-expanded', true);
    menu.setAttribute('inert', false);
    menu.setAttribute('aria-hidden', false);
  }
}



/**
 * スムーススクロール
 */
function smoothscroll() {
  let links = document.querySelectorAll('a[href^="#"]');
  for (const link of links) {
    // 除外設定
    if (link.classList.contains('scroll-exclude')) {
      continue;
    }

    link.addEventListener('click', (event) => {
      event.preventDefault();

      const href = link.getAttribute('href');
      const target = document.querySelector(href);

      if (!target) {
        return;
      }

      // scrollIntoViewサポートしてる？
      let isSupport = 'scrollBehavior' in document.documentElement.style;
      if (isSupport) {
        target.scrollIntoView({
          behavior: 'smooth',
        });
      } else {
        const headerHeight = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--header-height'));
        const targetPosition = target.getBoundingClientRect().top + window.pageYOffset - headerHeight;
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth',
        });
      }
    });
  }
}


/**
 * ヘッダーの高さ取得
 */
const observeHeaderBlockSize =  new ResizeObserver((entries) => {
  const header = entries[0];

  if (header.contentBoxSize) {
    const { blockSize } = header.borderBoxSize[0];
    const reboudedBlockSize = Math.round(blockSize);
    document.documentElement.style.setProperty('--header-height', `${reboudedBlockSize}px`);
  }
});
